{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","localUser","id","name","email","CardList","localUsers","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchTerm","target","value","state","fetch","then","response","json","users","this","filteredUsers","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,UAAUC,GAA1C,4BACrB,mCAAML,EAAMI,UAAUE,KAAtB,OACA,kCAAMN,EAAMI,UAAUG,MAAtB,WCFKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACMD,EAAMS,WAAWC,KAAK,SAAAN,GAAS,OAC7B,cAAE,EAAF,CAA0BA,UAAWA,GAAzBA,EAAUC,WCLrBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,aACba,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCHG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXb,WAAY,GACZU,WAAY,IALF,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,WAAYkB,S,oBAO5C,WAAU,IAAD,EAC4BC,KAAKN,MAAhCb,EADD,EACCA,WAAYU,EADb,EACaA,WACdU,EAAgBpB,EAAWqB,QAAO,SAAA1B,GAAS,OAC/CA,EAAUE,KAAKyB,cAAcC,SAASb,EAAWY,kBAGjD,OACA,sBAAK9B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,WAAeoB,W,GAjCfI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2cf4721a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"selfie\" src={`https://robohash.org/${props.localUser.id}?set=set2&size=180x180`}/>\r\n        <h1> {props.localUser.name} </h1>\r\n        <p> { props.localUser.email } </p>\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        { props.localUsers.map( localUser => (\r\n            < Card key={localUser.id} localUser={localUser}/>\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className='search-box'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      localUsers: [],\n      searchTerm: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({localUsers: users})); // we're binding our local state property to the response object received\n  }\n\n  handleChange = (e) => {\n    this.setState({searchTerm: e.target.value})\n  }\n\n  render() {\n    const { localUsers, searchTerm } = this.state;\n    const filteredUsers = localUsers.filter(localUser =>\n      localUser.name.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n\n      return (\n      <div className=\"App\">\n        <h1>Users Rolodex</h1>\n        <SearchBox\n          placeholder='search users...'\n          handleChange={this.handleChange}\n        />\n        <CardList localUsers = { filteredUsers }></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}